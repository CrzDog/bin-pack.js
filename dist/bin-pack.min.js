var binpack=function(){"use strict";var t={rotatedWidth(t){return t.rotated?t.height:t.width},rotatedHeight(t){return t.rotated?t.width:t.height}};class i{constructor(){}pack(i,e,r,h,n,o){let d=0;let u=0;let f=0;let l=false;let a=i.length;for(let n=0;n<a;++n){let g=i[n];if(d+t.rotatedWidth(g)>e){d=0;u=u+f+h;f=0}if(u+t.rotatedHeight(g)>r){l=true}g.x=d;g.y=u;d=d+t.rotatedWidth(g)+h;if(t.rotatedHeight(g)>f){f=t.rotatedHeight(g)}if(o){o(n,a,g.id)}}if(l){return new Error("Pack failed.")}}}class e{constructor(){}pack(t,i,e,r,h,n){let o={x:0,y:0,width:i,height:e,right:null,bottom:null};let d=t.length;let u=false;for(let i=0;i<d;++i){let e=t[i];let f=this._insertNode(o,e,r,h);if(f){e.x=f.x;e.y=f.y}else{u=true}if(n){n(i,d,e.id)}}if(u){return new Error("Pack failed.")}}_insertNode(i,e,r,h){if(i.right!==null){var n=this._insertNode(i.right,e,r,h);if(n){return n}return this._insertNode(i.bottom,e,r,h)}let o=t.rotatedWidth(e);let d=t.rotatedHeight(e);let u=o+r;let f=d+r;if(o>i.width||d>i.height){if(h===false){return null}if(d>i.width||o>i.height){return null}e.rotated=!e.rotated;o=t.rotatedWidth(e);d=t.rotatedHeight(e);u=o+r;f=d+r}i.right={x:i.x+u,y:i.y,width:i.width-u,height:d,right:null,bottom:null};i.bottom={x:i.x,y:i.y+f,width:i.width,height:i.height-f,right:null,bottom:null};return{x:i.x,y:i.y}}}function r(t,i){let e=t.width-i.width;if(e===0){e=t.id.localeCompare(i.id)}return e}function h(t,i){let e=t.height-i.height;if(e===0){e=t.id.localeCompare(i.id)}return e}function n(t,i){let e=t.width*t.height-i.width*i.height;if(e===0){e=t.id.localeCompare(i.id)}return e}function o(t,i){return t.id.localeCompare(i.id)}function d(t,i){let e=t.width;if(t.height>t.width){e=t.height;t.rotated=true}let r=i.width;if(i.height>i.width){r=i.height;i.rotated=true}let h=e-r;if(h===0){h=t.id.localeCompare(i.id)}return h}function u(t,i){let e=t.height;if(t.width>t.height){e=t.width;t.rotated=true}let r=i.height;if(i.width>i.height){r=i.width;i.rotated=true}let h=e-r;if(h===0){h=t.id.localeCompare(i.id)}return h}function f(t,r,h,n,o,d,u){let f=null;if(r==="simple"){f=new i}else if(r==="tree"){f=new e}return f.pack(t,h,n,o,d,u)}var l={sort(t,i="area",e="ascending",f=true){for(let i=0;i<t.length;++i){t[i].rotated=false}if(i==="width"){t.sort(f?d:r)}else if(i==="height"){t.sort(f?u:h)}else if(i==="area"){t.sort(n)}else{t.sort(o)}if(e==="descending"){t.reverse()}return t},pack(t,i,e,r,h=2,n=true,o=null){return f(t,i,e,r,h,n,o)},packAutoResize(t,i,e=32,r=32,h=2,n=true,o=null){let d=e;let u=r;while(1){let e=f(t,i,d,u,h,n,o);if(!e){return t}if(d===4096&&u===4096){console.error(e);return t}if(d===u){d*=2}else{u=d}}}};return l}();
//# sourceMappingURL=./dist/bin-pack.min.js.map