{"version":3,"file":"bin-pack.dev.js","sources":["../lib/utils.js","../lib/simple.js","../lib/tree.js","../index.js"],"sourcesContent":["export default {\n  rotatedWidth (node) {\n    return node.rotated ? node.height : node.width;\n  },\n\n  rotatedHeight (node) {\n    return node.rotated ? node.width : node.height;\n  },\n};","import utils from './utils';\n\nexport default class SimplePacker {\n  constructor() {\n  }\n\n  pack(nodes, width, height, padding, allowRotate, progress) {\n    let curX = 0;\n    let curY = 0;\n    let maxY = 0;\n\n    let hasError = false;\n    let len = nodes.length;\n\n    for (let i = 0; i < len; ++i) {\n      let node = nodes[i];\n      if (curX + utils.rotatedWidth(node) > width) {\n        curX = 0;\n        curY = curY + maxY + padding;\n        maxY = 0;\n      }\n\n      if (curY + utils.rotatedHeight(node) > height) {\n        hasError = true;\n      }\n\n      node.x = curX;\n      node.y = curY;\n\n      curX = curX + utils.rotatedWidth(node) + padding;\n      if (utils.rotatedHeight(node) > maxY) {\n        maxY = utils.rotatedHeight(node);\n      }\n\n      if (progress) {\n        progress(i, len, node.id);\n      }\n    }\n\n    if (hasError) {\n      return new Error('Pack failed.');\n    }\n  }\n}","import utils from './utils';\n\nexport default class TreePacker {\n  constructor() {\n  }\n\n  pack(nodes, width, height, padding, allowRotate, progress) {\n    let root = {\n      x: 0,\n      y: 0,\n      width: width,\n      height: height,\n      right: null,\n      bottom: null,\n    };\n\n    let len = nodes.length;\n    let hasError = false;\n\n    for (let i = 0; i < len; ++i) {\n      let node = nodes[i];\n      let result = this._insertNode(root, node, padding, allowRotate);\n      if (result) {\n        node.x = result.x;\n        node.y = result.y;\n      } else {\n        hasError = true;\n      }\n\n      if (progress) {\n        progress(i, len, node.id);\n      }\n    }\n\n    if (hasError) {\n      return new Error('Pack failed.');\n    }\n  }\n\n  _insertNode(treeNode, node, padding, allowRotate) {\n    // when this node is already occupied (when it has children),\n    // forward to child nodes recursively\n    if (treeNode.right !== null) {\n      var pos = this._insertNode(treeNode.right, node, padding, allowRotate);\n      if (pos) {\n        return pos;\n      }\n\n      return this._insertNode(treeNode.bottom, node, padding, allowRotate);\n    }\n\n    // determine trimmed and padded sizes\n    let nodeWidth = utils.rotatedWidth(node);\n    let nodeHeight = utils.rotatedHeight(node);\n    let paddedWidth = nodeWidth + padding;\n    let paddedHeight = nodeHeight + padding;\n\n    // trimmed element size must fit within current node rect\n    if (nodeWidth > treeNode.width || nodeHeight > treeNode.height) {\n      if (allowRotate === false) {\n        return null;\n      }\n\n      if (nodeHeight > treeNode.width || nodeWidth > treeNode.height) {\n        return null;\n      }\n\n      node.rotated = !node.rotated;\n      nodeWidth = utils.rotatedWidth(node);\n      nodeHeight = utils.rotatedHeight(node);\n      paddedWidth = nodeWidth + padding;\n      paddedHeight = nodeHeight + padding;\n    }\n\n    // create first child node in remaining space to the right, using nodeHeight\n    // so that only other elements with the same height or less can be added there\n    // (we do not use paddedHeight, because the padding area is reserved and should\n    // never be occupied)\n    treeNode.right = {\n      x: treeNode.x + paddedWidth,\n      y: treeNode.y,\n      width: treeNode.width - paddedWidth,\n      height: nodeHeight,\n      right: null,\n      bottom: null,\n    };\n\n    // create second child node in remaining space at the bottom, occupying the entire width\n    treeNode.bottom = {\n      x: treeNode.x,\n      y: treeNode.y + paddedHeight,\n      width: treeNode.width,\n      height: treeNode.height - paddedHeight,\n      right: null,\n      bottom: null,\n    };\n\n    // return position where to put element\n    return { x: treeNode.x, y: treeNode.y };\n  }\n}","import SimplePacker from './lib/simple';\nimport TreePacker from './lib/tree';\n\n// ==================\n// sort\n// ==================\n\nfunction _compareByWidth(a, b) {\n  let ret = a.width - b.width;\n  if (ret === 0) {\n    ret = a.id.localeCompare(b.id);\n  }\n  return ret;\n}\n\nfunction _compareByHeight(a, b) {\n  let ret = a.height - b.height;\n  if (ret === 0) {\n    ret = a.id.localeCompare(b.id);\n  }\n  return ret;\n}\n\nfunction _compareByArea(a, b) {\n  let ret = a.width * a.height - b.width * b.height;\n  if (ret === 0) {\n    ret = a.id.localeCompare(b.id);\n  }\n  return ret;\n}\n\nfunction _compareByID(a, b) {\n  return a.id.localeCompare(b.id);\n}\n\nfunction _compareByRotateWidth(a, b) {\n  let a_size = a.width;\n  if (a.height > a.width) {\n    a_size = a.height;\n    a.rotated = true;\n  }\n\n  let b_size = b.width;\n  if (b.height > b.width) {\n    b_size = b.height;\n    b.rotated = true;\n  }\n\n  let ret = a_size - b_size;\n  if (ret === 0) {\n    ret = a.id.localeCompare(b.id);\n  }\n  return ret;\n}\n\nfunction _compareByRotateHeight(a, b) {\n  let a_size = a.height;\n  if (a.width > a.height) {\n    a_size = a.width;\n    a.rotated = true;\n  }\n\n  let b_size = b.height;\n  if (b.width > b.height) {\n    b_size = b.width;\n    b.rotated = true;\n  }\n\n  let ret = a_size - b_size;\n  if (ret === 0) {\n    ret = a.id.localeCompare(b.id);\n  }\n  return ret;\n}\n\nfunction _pack(nodes, algorithm, width, height, padding, allowRotate, progress) {\n  let packer = null;\n\n  if (algorithm === 'simple') {\n    packer = new SimplePacker();\n  } else if (algorithm === 'tree') {\n    packer = new TreePacker();\n  }\n\n  return packer.pack(nodes, width, height, padding, allowRotate, progress);\n}\n\nexport default {\n  /**\n   * @method sort\n   * @param {Array} nodes\n   * @param {string} sortBy - 'width', 'height', 'area', 'id' - default is 'area'\n   * @param {string} order - 'ascending', 'descending', default is 'ascending'\n   * @param {boolean} allowRotate - default is true\n   */\n  sort(nodes, sortBy = 'area', order = 'ascending', allowRotate = true) {\n    // reset rotation\n    for (let i = 0; i < nodes.length; ++i) {\n      nodes[i].rotated = false;\n    }\n\n    // sort by\n    if (sortBy === 'width') {\n      nodes.sort(allowRotate ? _compareByRotateWidth : _compareByWidth);\n    } else if (sortBy === 'height') {\n      nodes.sort(allowRotate ? _compareByRotateHeight : _compareByHeight);\n    } else if (sortBy === 'area') {\n      nodes.sort(_compareByArea);\n    } else {\n      nodes.sort(_compareByID);\n    }\n\n    // sort order\n    if (order === 'descending') {\n      nodes.reverse();\n    }\n\n    return nodes;\n  },\n\n  /**\n   * @method pack\n   * @param {Array} nodes\n   * @param {string} algorithm - 'simple', 'tree', 'max-rect', 'skyline'\n   * @param {number} width\n   * @param {number} height\n   * @param {number} padding - default is 2\n   * @param {boolean} allowRotate - default is true\n   * @param {function} progress - default is null\n   */\n  pack(nodes, algorithm, width, height, padding = 2, allowRotate = true, progress = null) {\n    return _pack(nodes, algorithm, width, height, padding, allowRotate, progress);\n  },\n\n  /**\n   * @method packAutoResize\n   * @param {Array} nodes\n   * @param {string} algorithm - 'simple', 'tree', 'max-rect', 'skyline'\n   * @param {number} width - default is 32\n   * @param {number} height - default is 32\n   * @param {number} padding - default is 2\n   * @param {boolean} allowRotate - default is true\n   * @param {function} progress - default is null\n   */\n  packAutoResize(nodes, algorithm, width = 32, height = 32, padding = 2, allowRotate = true, progress = null) {\n    let w = width;\n    let h = height;\n\n    while(1) {\n      let error = _pack(nodes, algorithm, w, h, padding, allowRotate, progress);\n\n      if (!error) {\n        return nodes;\n      }\n\n      if (w === 4096 && h === 4096) {\n        console.error(error);\n        return nodes;\n      }\n\n      if (w === h) {\n        w *= 2;\n      } else {\n        h = w;\n      }\n    }\n  }\n};"],"names":[],"mappings":"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"}