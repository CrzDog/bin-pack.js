{"version":3,"file":"bin-pack.dev.js","sources":["../lib/utils.js","../lib/simple.js","../lib/tree.js","../lib/max-rect.js","../index.js"],"sourcesContent":["export default {\n  rotatedWidth (node) {\n    return node.rotated ? node.height : node.width;\n  },\n\n  rotatedHeight (node) {\n    return node.rotated ? node.width : node.height;\n  },\n};","import utils from './utils';\n\nexport default function (nodes, width, height, padding, allowRotate, progress) {\n  let curX = 0;\n  let curY = 0;\n  let maxY = 0;\n\n  let hasError = false;\n  let len = nodes.length;\n\n  for (let i = 0; i < len; ++i) {\n    let node = nodes[i];\n    if (curX + utils.rotatedWidth(node) > width) {\n      curX = 0;\n      curY = curY + maxY + padding;\n      maxY = 0;\n    }\n\n    if (curY + utils.rotatedHeight(node) > height) {\n      hasError = true;\n    }\n\n    node.x = curX;\n    node.y = curY;\n\n    curX = curX + utils.rotatedWidth(node) + padding;\n    if (utils.rotatedHeight(node) > maxY) {\n      maxY = utils.rotatedHeight(node);\n    }\n\n    if (progress) {\n      progress(i, len, node.id);\n    }\n  }\n\n  if (hasError) {\n    return new Error('Pack failed.');\n  }\n}","import utils from './utils';\n\nfunction _insertNode(treeNode, node, padding, allowRotate) {\n  // when this node is already occupied (when it has children),\n  // forward to child nodes recursively\n  if (treeNode.right !== null) {\n    var pos = _insertNode(treeNode.right, node, padding, allowRotate);\n    if (pos) {\n      return pos;\n    }\n\n    return _insertNode(treeNode.bottom, node, padding, allowRotate);\n  }\n\n  // determine trimmed and padded sizes\n  let nodeWidth = utils.rotatedWidth(node);\n  let nodeHeight = utils.rotatedHeight(node);\n  let paddedWidth = nodeWidth + padding;\n  let paddedHeight = nodeHeight + padding;\n\n  // trimmed element size must fit within current node rect\n  if (nodeWidth > treeNode.width || nodeHeight > treeNode.height) {\n    if (allowRotate === false) {\n      return null;\n    }\n\n    if (nodeHeight > treeNode.width || nodeWidth > treeNode.height) {\n      return null;\n    }\n\n    node.rotated = !node.rotated;\n    nodeWidth = utils.rotatedWidth(node);\n    nodeHeight = utils.rotatedHeight(node);\n    paddedWidth = nodeWidth + padding;\n    paddedHeight = nodeHeight + padding;\n  }\n\n  // create first child node in remaining space to the right, using nodeHeight\n  // so that only other elements with the same height or less can be added there\n  // (we do not use paddedHeight, because the padding area is reserved and should\n  // never be occupied)\n  treeNode.right = {\n    x: treeNode.x + paddedWidth,\n    y: treeNode.y,\n    width: treeNode.width - paddedWidth,\n    height: nodeHeight,\n    right: null,\n    bottom: null,\n  };\n\n  // create second child node in remaining space at the bottom, occupying the entire width\n  treeNode.bottom = {\n    x: treeNode.x,\n    y: treeNode.y + paddedHeight,\n    width: treeNode.width,\n    height: treeNode.height - paddedHeight,\n    right: null,\n    bottom: null,\n  };\n\n  // return position where to put element\n  return { x: treeNode.x, y: treeNode.y };\n}\n\nexport default function (nodes, width, height, padding, allowRotate, progress) {\n  let root = {\n    x: 0,\n    y: 0,\n    width: width,\n    height: height,\n    right: null,\n    bottom: null,\n  };\n\n  let len = nodes.length;\n  let hasError = false;\n\n  for (let i = 0; i < len; ++i) {\n    let node = nodes[i];\n    let result = _insertNode(root, node, padding, allowRotate);\n    if (result) {\n      node.x = result.x;\n      node.y = result.y;\n    } else {\n      hasError = true;\n    }\n\n    if (progress) {\n      progress(i, len, node.id);\n    }\n  }\n\n  if (hasError) {\n    return new Error('Pack failed.');\n  }\n}","function _cloneRect(rect) {\n  return {\n    x: rect.x,\n    y: rect.y,\n    width: rect.width,\n    height: rect.height,\n  };\n}\n\nfunction _containsRect(a, b) {\n  if (\n    a.x <= b.x &&\n    a.x + a.width >= b.x + b.width &&\n    a.y <= b.y &&\n    a.y + a.height >= b.y + b.height\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction _scoreRect(freeRects, width, height, allowRotate, scores) {\n  scores.score1 = Number.MAX_VALUE;\n  scores.score2 = Number.MAX_VALUE;\n\n  let newRect = { x: 0, y: 0, width: 1, height: 1 };\n  let found = false;\n\n  //\n  for (let i = 0; i < freeRects.length; ++i) {\n    let freeRect = freeRects[i];\n\n    let leftoverHoriz, leftoverVert, shortSideFit, longSideFit;\n    //\n    if (freeRect.width >= width && freeRect.height >= height) {\n      leftoverHoriz = Math.abs(Math.floor(freeRect.width) - width);\n      leftoverVert = Math.abs(Math.floor(freeRect.height) - height);\n      shortSideFit = Math.min(leftoverHoriz, leftoverVert);\n      longSideFit = Math.max(leftoverHoriz, leftoverVert);\n\n      if (shortSideFit < scores.score1 || (shortSideFit === scores.score1 && longSideFit < scores.score2)) {\n        newRect.x = freeRect.x;\n        newRect.y = freeRect.y;\n        newRect.width = width;\n        newRect.height = height;\n        scores.score1 = shortSideFit;\n        scores.score2 = longSideFit;\n\n        found = true;\n      }\n    }\n\n    // rotated\n    if (allowRotate && freeRect.width >= height && freeRect.height >= width) {\n      leftoverHoriz = Math.abs(Math.floor(freeRect.width) - height);\n      leftoverVert = Math.abs(Math.floor(freeRect.height) - width);\n      shortSideFit = Math.min(leftoverHoriz, leftoverVert);\n      longSideFit = Math.max(leftoverHoriz, leftoverVert);\n\n      if (shortSideFit < scores.score1 || (shortSideFit === scores.score1 && longSideFit < scores.score2)) {\n        newRect.x = freeRect.x;\n        newRect.y = freeRect.y;\n        newRect.width = height;\n        newRect.height = width;\n        scores.score1 = shortSideFit;\n        scores.score2 = longSideFit;\n\n        found = true;\n      }\n    }\n  }\n\n  //\n  if (found === false) {\n    scores.score1 = Number.MAX_VALUE;\n    scores.score2 = Number.MAX_VALUE;\n  }\n\n  return newRect;\n}\n\nfunction _splitFreeNode(freeRects, freeNode, usedNode) {\n  // Test with SAT if the rectangles even intersect.\n  if (usedNode.x >= freeNode.x + freeNode.width || usedNode.x + usedNode.width <= freeNode.x ||\n    usedNode.y >= freeNode.y + freeNode.height || usedNode.y + usedNode.height <= freeNode.y)\n    return false;\n\n  let newNode;\n  if (usedNode.x < freeNode.x + freeNode.width && usedNode.x + usedNode.width > freeNode.x) {\n    // New node at the top side of the used node.\n    if (usedNode.y > freeNode.y && usedNode.y < freeNode.y + freeNode.height) {\n      newNode = _cloneRect(freeNode);\n      newNode.height = usedNode.y - newNode.y;\n      freeRects.push(newNode);\n    }\n\n    // New node at the bottom side of the used node.\n    if (usedNode.y + usedNode.height < freeNode.y + freeNode.height) {\n      newNode = _cloneRect(freeNode);\n      newNode.y = usedNode.y + usedNode.height;\n      newNode.height = freeNode.y + freeNode.height - (usedNode.y + usedNode.height);\n      freeRects.push(newNode);\n    }\n  }\n\n  if (usedNode.y < freeNode.y + freeNode.height && usedNode.y + usedNode.height > freeNode.y) {\n    // New node at the left side of the used node.\n    if (usedNode.x > freeNode.x && usedNode.x < freeNode.x + freeNode.width) {\n      newNode = _cloneRect(freeNode);\n      newNode.width = usedNode.x - newNode.x;\n      freeRects.push(newNode);\n    }\n\n    // New node at the right side of the used node.\n    if (usedNode.x + usedNode.width < freeNode.x + freeNode.width) {\n      newNode = _cloneRect(freeNode);\n      newNode.x = usedNode.x + usedNode.width;\n      newNode.width = freeNode.x + freeNode.width - (usedNode.x + usedNode.width);\n      freeRects.push(newNode);\n    }\n  }\n\n  return true;\n}\n\nfunction _placeRect(freeRects, rect) {\n  for (let i = 0; i < freeRects.length; ++i) {\n    if (_splitFreeNode(freeRects, freeRects[i], rect)) {\n      freeRects.splice(i, 1);\n      --i;\n    }\n  }\n\n  // cleanUpFreeRects\n  for (let i = 0; i < freeRects.length; ++i) {\n    for (let j = i + 1; j < freeRects.length; ++j) {\n      if (_containsRect(freeRects[j], freeRects[i])) {\n        freeRects.splice(i, 1);\n        --i;\n        break;\n      }\n\n      if (_containsRect(freeRects[i], freeRects[j])) {\n        freeRects.splice(j, 1);\n        --j;\n      }\n    }\n  }\n}\n\nexport default function(nodes, width, height, padding, allowRotate, progress) {\n  let freeRects = [];\n\n  // NOTE: the first free rect can have padding at the edge\n  freeRects.push({\n    x: 0,\n    y: 0,\n    width: width + padding,\n    height: height + padding,\n  });\n\n  // clone\n  let unhandledNodes = nodes.slice();\n  let scores = {\n    score1: Number.MAX_VALUE, // shortSideFit\n    score2: Number.MAX_VALUE, // longSideFit\n  };\n  let i = 0;\n  let len = nodes.length;\n\n  while (unhandledNodes.length > 0) {\n    let bestScore1 = Number.MAX_VALUE;\n    let bestScore2 = Number.MAX_VALUE;\n    let bestNodeIdx = -1;\n    let bestRect = { x: 0, y: 0, width: 1, height: 1 };\n\n    for (let i = 0; i < unhandledNodes.length; ++i) {\n      let newRect = _scoreRect(\n        freeRects,\n        unhandledNodes[i].width + padding,\n        unhandledNodes[i].height + padding,\n        allowRotate,\n        scores\n      );\n\n      if (scores.score1 < bestScore1 || (scores.score1 === bestScore1 && scores.score2 < bestScore2)) {\n        bestScore1 = scores.score1;\n        bestScore2 = scores.score2;\n        bestRect = newRect;\n        bestNodeIdx = i;\n      }\n    }\n\n    if (bestNodeIdx === -1) {\n      return new Error('Pack failed.');\n    }\n\n    _placeRect(freeRects, bestRect);\n\n    // apply the best node and remove it from unhandled nodes\n    let bestNode = unhandledNodes.splice(bestNodeIdx, 1)[0];\n    bestNode.x = Math.floor(bestRect.x);\n    bestNode.y = Math.floor(bestRect.y);\n    bestNode.rotated = (bestNode.width + padding !== bestRect.width);\n\n    if (progress) {\n      progress(i, len, bestNode.id);\n    }\n    ++i;\n  }\n}","import simple_pack from './lib/simple';\nimport tree_pack from './lib/tree';\nimport max_rect_pack from './lib/max-rect';\n\n// ==================\n// sort\n// ==================\n\nfunction _compareByWidth(a, b) {\n  let ret = a.width - b.width;\n  if (ret === 0) {\n    ret = a.id.localeCompare(b.id);\n  }\n  return ret;\n}\n\nfunction _compareByHeight(a, b) {\n  let ret = a.height - b.height;\n  if (ret === 0) {\n    ret = a.id.localeCompare(b.id);\n  }\n  return ret;\n}\n\nfunction _compareByArea(a, b) {\n  let ret = a.width * a.height - b.width * b.height;\n  if (ret === 0) {\n    ret = a.id.localeCompare(b.id);\n  }\n  return ret;\n}\n\nfunction _compareByID(a, b) {\n  return a.id.localeCompare(b.id);\n}\n\nfunction _compareByRotateWidth(a, b) {\n  let a_size = a.width;\n  if (a.height > a.width) {\n    a_size = a.height;\n    a.rotated = true;\n  }\n\n  let b_size = b.width;\n  if (b.height > b.width) {\n    b_size = b.height;\n    b.rotated = true;\n  }\n\n  let ret = a_size - b_size;\n  if (ret === 0) {\n    ret = a.id.localeCompare(b.id);\n  }\n  return ret;\n}\n\nfunction _compareByRotateHeight(a, b) {\n  let a_size = a.height;\n  if (a.width > a.height) {\n    a_size = a.width;\n    a.rotated = true;\n  }\n\n  let b_size = b.height;\n  if (b.width > b.height) {\n    b_size = b.width;\n    b.rotated = true;\n  }\n\n  let ret = a_size - b_size;\n  if (ret === 0) {\n    ret = a.id.localeCompare(b.id);\n  }\n  return ret;\n}\n\nfunction _pack(nodes, algorithm, width, height, padding, allowRotate, progress) {\n  let pack = null;\n\n  if (algorithm === 'simple') {\n    pack = simple_pack;\n  } else if (algorithm === 'tree') {\n    pack = tree_pack;\n  } else if (algorithm === 'max-rect') {\n    pack = max_rect_pack;\n  }\n\n  return pack(nodes, width, height, padding, allowRotate, progress);\n}\n\nexport default {\n  /**\n   * @method sort\n   * @param {Array} nodes\n   * @param {string} sortBy - 'width', 'height', 'area', 'id' - default is 'area'\n   * @param {string} order - 'ascending', 'descending', default is 'ascending'\n   * @param {boolean} allowRotate - default is true\n   */\n  sort(nodes, sortBy = 'area', order = 'ascending', allowRotate = true) {\n    // reset rotation\n    for (let i = 0; i < nodes.length; ++i) {\n      nodes[i].rotated = false;\n    }\n\n    // sort by\n    if (sortBy === 'width') {\n      nodes.sort(allowRotate ? _compareByRotateWidth : _compareByWidth);\n    } else if (sortBy === 'height') {\n      nodes.sort(allowRotate ? _compareByRotateHeight : _compareByHeight);\n    } else if (sortBy === 'area') {\n      nodes.sort(_compareByArea);\n    } else {\n      nodes.sort(_compareByID);\n    }\n\n    // sort order\n    if (order === 'descending') {\n      nodes.reverse();\n    }\n\n    return nodes;\n  },\n\n  /**\n   * @method pack\n   * @param {Array} nodes\n   * @param {string} algorithm - 'simple', 'tree', 'max-rect', 'skyline'\n   * @param {number} width\n   * @param {number} height\n   * @param {number} padding - default is 2\n   * @param {boolean} allowRotate - default is true\n   * @param {function} progress - default is null\n   */\n  pack(nodes, algorithm, width, height, padding = 2, allowRotate = true, progress = null) {\n    return _pack(nodes, algorithm, width, height, padding, allowRotate, progress);\n  },\n\n  /**\n   * @method packAutoResize\n   * @param {Array} nodes\n   * @param {string} algorithm - 'simple', 'tree', 'max-rect', 'skyline'\n   * @param {number} width - default is 32\n   * @param {number} height - default is 32\n   * @param {number} padding - default is 2\n   * @param {boolean} allowRotate - default is true\n   * @param {function} progress - default is null\n   */\n  packAutoResize(nodes, algorithm, width = 32, height = 32, padding = 2, allowRotate = true, progress = null) {\n    let w = width;\n    let h = height;\n\n    while(1) {\n      let error = _pack(nodes, algorithm, w, h, padding, allowRotate, progress);\n\n      if (!error) {\n        return nodes;\n      }\n\n      if (w === 4096 && h === 4096) {\n        console.error(error);\n        return nodes;\n      }\n\n      if (w === h) {\n        w *= 2;\n      } else {\n        h = w;\n      }\n    }\n  }\n};"],"names":[],"mappings":"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"}